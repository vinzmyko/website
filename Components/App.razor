<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    <link rel="stylesheet" href="output.css" />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100..900;1,100..900&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Chivo+Mono:ital,wght@0,100..900;1,100..900&display=swap" rel="stylesheet">
    <HeadOutlet />
</head>

<body>
    <Routes />
    <script src="_framework/blazor.web.js"></script>
    <script>
        window.resetAnimation = function(element) {
            element.style.animation = 'none';
            element.offsetHeight; // trigger reflow
            element.style.animation = null; 
        }

        let scrollSpy = null;

        function initializeScrollSpy(dotnetHelper) {
            console.log('initializeScrollSpy called');
            
            const sections = document.querySelectorAll("div[id]");
            const navItems = document.querySelectorAll(".navigation-item");
            
            scrollSpy = throttle(() => {
                let currentSection = "";
                const scrollPosition = window.scrollY;
                sections.forEach((section) => {
                    const sectionTop = section.offsetTop;
                    const sectionHeight = section.clientHeight;
                    if (scrollPosition >= sectionTop - sectionHeight / 3) {
                        currentSection = section.getAttribute("id");
                    }
                });
                
                console.log(`Current section: ${currentSection}`);
                dotnetHelper.invokeMethodAsync('UpdateCurrentSection', currentSection);
            }, 100);

            window.addEventListener('scroll', scrollSpy);
            scrollSpy(); // Call once to set initial state
        }

        function removeScrollSpy() {
            console.log('removeScrollSpy called');
            if (scrollSpy) {
                window.removeEventListener('scroll', scrollSpy);
                scrollSpy = null;
            }
        }

        function scrollToElement(elementId) {
            console.log(`scrollToElement called with elementId: ${elementId}`);
            const element = document.getElementById(elementId);
            if (element) {
                element.scrollIntoView({ behavior: 'smooth' });
            } else {
                console.warn(`Element with id ${elementId} not found`);
            }
        }

        function throttle(func, limit) {
            let inThrottle;
            return function() {
                const args = arguments;
                const context = this;
                if (!inThrottle) {
                    func.apply(context, args);
                    inThrottle = true;
                    setTimeout(() => inThrottle = false, limit);
                }
            }
        }
    </script>
</body>

</html>
