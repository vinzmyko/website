@using System.Text.RegularExpressions
@inject HttpClient HttpClient

<style>
    .modal-content {
        --scrollbar-bg: rgba(255, 255, 255, 0.1);
        --scrollbar-thumb: rgba(255, 255, 255, 0.5);
        --scrollbar-thumb-hover: rgba(255, 255, 255, 0.7);
    }

    .modal-content {
        scrollbar-width: thin;
        scrollbar-color: var(--scrollbar-thumb) var(--scrollbar-bg);
    }

    .modal-content::-webkit-scrollbar {
        width: 8px;
    }

    .modal-content::-webkit-scrollbar-track {
        background: var(--scrollbar-bg);
        border-radius: 4px;
    }

    .modal-content::-webkit-scrollbar-thumb {
        background-color: var(--scrollbar-thumb);
        border-radius: 4px;
    }

    .modal-content::-webkit-scrollbar-thumb:hover {
        background-color: var(--scrollbar-thumb-hover);
    }
</style>

<div class="@(IsVisible ? "fixed inset-0 bg-black/60 backdrop-blur-sm z-40 flex justify-center items-center" : "hidden")">
    <div class="bg-background bg-opacity-95 rounded-lg shadow-xl z-50 max-w-3xl w-full font-primary relative flex flex-col max-h-[90vh]">
        <div class="p-8 pb-4">
            <button @onclick="Close" class="absolute top-4 right-4 text-link hover:text-accent1 transition-colors duration-200">
                <Icon FileName="close_window" Width="28" Height="24" Class="transition-colors duration-200" />
            </button>
            @if (Project != null)
            {
                <h2 class="font-secondary text-3xl text-text font-bold mb-4">@Project.Name</h2>
            }
        </div>

        <div class="overflow-y-auto px-8 pb-8 modal-content">
            @if (Project != null)
            {
                <p class="text-text mb-4">@Project.Description</p>

                @if (HasImageFolder())
                {
                    <div class="mb-4 relative">
                        <div class="relative h-64 bg-black/60">
                            <img src="@Project!.Images![currentImageIndex]" alt="Project image" class="w-full h-full object-contain" />
                            @if (Project.Images.Count > 1)
                            {
                                <button @onclick="PreviousImage" class="absolute left-2 top-1/2 transform -translate-y-1/2 bg-black/50 text-white p-2 rounded-full">
                                    <Icon FileName="arrow_back" Width="24" Height="24" />
                                </button>
                                <button @onclick="NextImage" class="absolute right-2 top-1/2 transform -translate-y-1/2 bg-black/50 text-white p-2 rounded-full">
                                    <Icon FileName="arrow_forward" Width="24" Height="24" />
                                </button>
                            }
                        </div>
                        @if (Project.Images.Count > 1)
                        {
                            <div class="text-center mt-2">
                                <span class="text-sm text-text">@(currentImageIndex + 1) / @Project.Images.Count</span>
                            </div>
                        }
                    </div>
                }

                <div class="flex flex-wrap gap-4 mb-4">
                    <div class="flex items-center">
                        <span class="font-accent text-sm text-link mr-2">Started:</span>
                        <span class="text-text">@Project.DateStarted.ToShortDateString()</span>
                    </div>
                    @if (Project.DateFinished.HasValue)
                    {
                        <div class="flex items-center">
                            <span class="font-accent text-sm text-link mr-2">Finished:</span> <span class="text-text">@Project.DateFinished.Value.ToShortDateString()</span>
                        </div>
                    }
                    else
                    {
                        <div class="flex items-center">
                            <span class="font-accent text-sm text-link mr-2">Status:</span>
                            <span class="text-accent1">In Progress</span>
                        </div>
                    }
                </div>

                <div class="flex flex-wrap gap-4 mb-4">
                    <div class="flex-1">
                        <h3 class="font-secondary text-xl text-text font-semibold mb-2">Technologies</h3>
                        <div class="flex flex-wrap gap-2">
                            @foreach (var tech in Project.Technologies)
                            {
                                <span class="font-accent bg-accent1 text-text px-2 py-1 rounded text-sm">@tech</span>
                            }
                        </div>
                    </div>
                    <div class="flex-1">
                        <h3 class="font-secondary text-xl text-text font-semibold mb-2">Programming Languages</h3>
                        <div class="flex flex-wrap gap-2">
                            @foreach (var lang in Project.ProgrammingLanguages)
                            {
                                <span class="font-accent bg-link text-text px-2 py-1 rounded text-sm">@lang</span>
                            }
                        </div>
                    </div>
                </div>

                <div class="mb-4">
                    @if (!string.IsNullOrEmpty(Project.WebsiteLink))
                    {
                        <div class="mb-2">
                            <span class="text-xl font-secondary text-text font-semibold">Website: </span>
                            <span class="inline-flex items-center group">
                                <a href="@Project.WebsiteLink" target="_blank" rel="noopener noreferrer" 
                                class="text-link group-hover:text-accent1 transition-colors duration-200">
                                    @Project.WebsiteLink
                                </a>
                                <Icon FileName="link" Width="20" Height="20" Class="ml-1 text-link group-hover:text-accent1 transition-colors duration-200" />
                            </span>
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(Project.GitHubLink))
                    {
                        <div class="mb-2">
                            <span class="text-xl font-secondary text-text font-semibold">GitHub Repository: </span>
                            <span class="inline-flex items-center group">
                                <a href="@Project.GitHubLink" target="_blank" rel="noopener noreferrer" 
                                class="text-link group-hover:text-accent1 transition-colors duration-200">
                                    @Project.GitHubLink
                                </a>
                                <Icon FileName="link" Width="20" Height="20" Class="ml-1 text-link group-hover:text-accent1 transition-colors duration-200" />
                            </span>
                        </div>
                    }

                @if (HasPostMortem != null)
                {
                    @if (HasPostMortem.Result)
                    {
                        <div>
                            <span class="text-xl font-secondary text-text font-semibold">Project Post-Mortem: </span>
                            <span class="inline-flex items-center group">
                                <a href="@GetPostMortemLink()" target="_blank" rel="noopener noreferrer" 
                                class="text-link group-hover:text-accent1 transition-colors duration-200">
                                    @(Path.GetFileName(GetPostMortemLink()))
                                </a>
                                <Icon FileName="link" Width="20" Height="20" Class="ml-1 text-link group-hover:text-accent1 transition-colors duration-200" />
                            </span>
                        </div>
                    }
                }
                </div>
                @if (!string.IsNullOrEmpty(Project.VideoDemo))
                {
                    <div class="mb-4">
                        <h3 class="font-secondary text-xl text-text font-semibold mb-2">Video Demo</h3>
                        <iframe width="100%" height="315"
                                src="@GetYouTubeEmbedUrl(Project.VideoDemo)"
                                frameborder="0"
                                allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                                allowfullscreen></iframe>
                    </div>
                }
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public Project? Project { get; set; }
    private int currentImageIndex = 0;
    private Task<bool>? _hasPostMortemTask;

    private Task Close()
    {
        return IsVisibleChanged.InvokeAsync(false);
    }

    private string GetYouTubeEmbedUrl(string url)
    {
        var videoId = GetYouTubeId(url);
        return $"https://www.youtube.com/embed/{videoId}";
    }

    private string GetYouTubeId(string url)
    {
        var uri = new Uri(url);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);

        if (query.AllKeys.Contains("v"))
        {
            return query["v"] ?? string.Empty;
        }
        else if (uri.Host == "youtu.be")
        {
            return uri.Segments.Last();
        }

        return string.Empty;
    }

    private Task<bool> HasPostMortem
    {
        get
        {
            if (_hasPostMortemTask == null)
            {
                _hasPostMortemTask = CheckPostMortemExists();
            }
            return _hasPostMortemTask;
        }
    }

    private async Task<bool> CheckPostMortemExists()
    {
        if (Project == null) return false;
        
        string filePath = $"/Images/Projects/{Project.Name.Replace(" ", "")}/{Project.Name.Replace(" ", "")}.pdf";
        Console.WriteLine($"Checking for post-mortem: {filePath}");
        
        try
        {
            var response = await HttpClient.GetAsync(filePath);
            bool exists = response.IsSuccessStatusCode;
            Console.WriteLine($"Post-mortem exists: {exists}");
            return exists;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error checking for post-mortem: {ex.Message}");
            return false;
        }
    }


    private string GetPostMortemLink()
    {
        if (Project == null) return string.Empty;
        
        string link = $"/Images/Projects/{Project.Name.Replace(" ", "")}/{Project.Name.Replace(" ", "")}.pdf";
        Console.WriteLine($"Post-mortem link: {link}");
        return link;
    }

    private bool HasImageFolder()
    {
        return Project?.Images?.Any() == true;
    }

    private void PreviousImage()
    {
        if (Project?.Images == null || !Project.Images.Any()) return;
        if (currentImageIndex > 0)
            currentImageIndex--;
        else
            currentImageIndex = Project.Images.Count - 1;
    }

    private void NextImage()
    {
        if (Project?.Images == null || !Project.Images.Any()) return;
        if (currentImageIndex < Project.Images.Count - 1)
            currentImageIndex++;
        else
            currentImageIndex = 0;
    }
}