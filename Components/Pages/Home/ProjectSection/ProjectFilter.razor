@using PersonalWebsite.Models

@namespace Projects

<div class="flex flex-wrap gap-6 items-center justify-center">
    <div class="flex items-center">
        <label for="sort" class="mr-3 text-text font-semibold">Sort:</label>
        <select id="sort" @onchange="HandleSortChange" class="bg-background text-text border-2 border-link rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-accent1 focus:border-accent1 transition duration-150 ease-in-out">
            @foreach (var option in SortOptions)
            {
                <option value="@option">@option</option>
            }
        </select>
    </div>
    <div class="flex items-center">
        <label for="type" class="mr-3 text-text font-semibold">Project Type:</label>
        <select id="type" @onchange="HandleTypeChange" class="bg-background text-text border-2 border-link rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-accent1 focus:border-accent1 transition duration-150 ease-in-out">
            <option value="">All</option>
            @foreach (var type in AvailableTypes)
            {
                <option value="@type">@type</option>
            }
        </select>
    </div>
</div>

@code {
    [Parameter] public List<string> SortOptions { get; set; } = new List<string>();
    [Parameter] public List<PrimaryCategory> AvailableTypes { get; set; } = new List<PrimaryCategory>();
    [Parameter] public EventCallback<string> OnSortChange { get; set; }
    [Parameter] public EventCallback<PrimaryCategory?> OnTypeChange { get; set; }

    private void HandleSortChange(ChangeEventArgs e)
    {
        OnSortChange.InvokeAsync(e.Value?.ToString());
    }

    private void HandleTypeChange(ChangeEventArgs e)
    {
        PrimaryCategory? selectedType = null;
        if (Enum.TryParse<PrimaryCategory>(e.Value?.ToString(), out var result))
        {
            selectedType = result;
        }
        OnTypeChange.InvokeAsync(selectedType);
    }
}